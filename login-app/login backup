import React, { useState } from "react";
import {
  TextField,
  Button,
  Typography,
  Link,
  AppBar,
  Toolbar,
  Container,
  Card,
  CardContent,
} from "@mui/material";
import "./Login.css";

function Login({ onLogin }) {
  const [username, setUsername] = useState("");
  const [password, setPassword] = useState("");
  const [error, setError] = useState("");

  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      const response = await fetch("http://localhost:3001/login", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ username, password }),
        credentials: "include",
      });

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
      const { accessToken } = await response.json();
      localStorage.setItem("accessToken", accessToken); // Store the token
      onLogin(true); // Update the parent component or context provider
    } catch (error) {
      console.error("Fetch error: " + error.message);
      setError("Login failed. Please try again.");
      onLogin(false);
    }
  };

  const handleLogout = () => {
    localStorage.removeItem("accessToken"); // Remove the token
    onLogin(false); // Update the parent component or context provider
  };

  return (
    <div>
      <AppBar position="static">
        <Toolbar>
          <Typography variant="h6" component="div" sx={{ flexGrow: 1 }}>
            Hospital Name
          </Typography>
          <Button color="inherit" onClick={handleLogout}>
            Logout
          </Button>
        </Toolbar>
      </AppBar>
      <Container maxWidth="md" className="container">
        <Card className="card">
          <CardContent className="card-content">
            <Typography variant="h5" align="center" gutterBottom>
              Login
            </Typography>
            <form onSubmit={handleSubmit} className="form">
              <TextField
                type="text"
                label="Username"
                variant="outlined"
                fullWidth
                value={username}
                onChange={(e) => setUsername(e.target.value)}
                margin="normal"
              />
              <TextField
                type="password"
                label="Password"
                variant="outlined"
                fullWidth
                value={password}
                onChange={(e) => setPassword(e.target.value)}
                margin="normal"
              />
              <Button
                sx={{ mt: 3, mb: 2 }}
                type="submit"
                variant="contained"
                color="primary"
                fullWidth
                className="submit-button"
              >
                Login
              </Button>
              {error && (
                <Typography variant="body2" className="error-message">
                  {error}
                </Typography>
              )}
              <Typography variant="body2" align="left" sx={{ mt: 2 }}>
                <Link href="#" onClick={handleLogout} underline="hover">
                  Forgot password?
                </Link>
              </Typography>
              <Typography variant="body1">
                Don't have an account?{" "}
                <Link
                  component="button"
                  variant="body2"
                  underline="hover"
                >
                  Register here
                </Link>
              </Typography>
            </form>
          </CardContent>
        </Card>
      </Container>
      <footer>
        <Typography
          variant="body2"
          color="textSecondary"
          align="center"
          sx={{ mt: 4 }}
        >
          &copy; {new Date().getFullYear()} Hospital Name. All rights reserved.
        </Typography>
      </footer>
    </div>
  );
}
export default Login;

// import React, { useState } from 'react';
// import { TextField, Button, Typography, Link, AppBar, Toolbar, Container, Card, CardContent } from '@mui/material';
// import './Login.css';

// function Login({ onLogin }) {
//   const [username, setUsername] = useState('');
//   const [password, setPassword] = useState('');
//   const [error, setError] = useState('');

  

//   const handleSubmit = async (e) => {
//     e.preventDefault();
//     try {
//       const response = await fetch('http://localhost:3001/login', {
//         method: 'POST',
//         headers: { 'Content-Type': 'application/json' },
//         body: JSON.stringify({ username, password }),
//         credentials: 'include',
//       });
  
//       if (!response.ok) {
//         throw new Error(`HTTP error! status: ${response.status}`);
//       }
//       const { accessToken } = await response.json();
//       localStorage.setItem('accessToken', accessToken); // Store the token
//       onLogin(true); // Update the parent component or context provider
//     } catch (error) {
//       console.error("Fetch error: " + error.message);
//       setError("Login failed. Please try again.");
//       onLogin(false);
//     }
//   };

//   const handleLogout = () => {
//     localStorage.removeItem('accessToken'); // Remove the token
//     onLogin(false); // Update the parent component or context provider
//   };

//   return (
//     <div>
//       <AppBar position="static">
//         <Toolbar>
//           <Typography variant="h6" component="div" sx={{ flexGrow: 1 }}>
//             Hospital Name
//           </Typography>
//           <Button color="inherit" onClick={handleLogout}>Logout</Button>
//         </Toolbar>
//       </AppBar>
//       <Container maxWidth="md" className="container">
//         <Card className="card">
//           <CardContent className="card-content">
//             <Typography variant="h5" align="center" gutterBottom>Login</Typography>
//             <form onSubmit={handleSubmit} className="form">
//               <TextField
//                 type="text"
//                 label="Username"
//                 variant="outlined"
//                 fullWidth
//                 value={username}
//                 onChange={e => setUsername(e.target.value)}
//                 margin="normal"
//               />
//               <TextField
//                 type="password"
//                 label="Password"
//                 variant="outlined"
//                 fullWidth
//                 value={password}
//                 onChange={e => setPassword(e.target.value)}
//                 margin="normal"
//               />
//               <Button sx={{ mt: 3, mb: 2 }} type="submit" variant="contained" color="primary" fullWidth className="submit-button">
//                 Login
//               </Button>
//               {error && <Typography variant="body2" className="error-message">{error}</Typography>}
//               <Typography variant="body2" align="left" sx={{ mt: 2 }}>
//                 <Link href="#" onClick={handleLogout} underline="hover">
//                   Forgot password?
//                 </Link>
//               </Typography>
//               <Typography variant="body2" align="left" sx={{ mt: 2 }}>
//                 Don't have an account? 
//                 <Link href="#" onClick={handleLogout} underline="hover">
//                   Sign up here
//                 </Link>
//               </Typography>
//             </form>
//           </CardContent>
//         </Card>
//       </Container>
//       <footer>
//       <Typography variant="body2" color="textSecondary" align="center" sx={{ mt: 4 }}>
//           &copy; {new Date().getFullYear()} Hospital Name. All rights reserved.
//         </Typography>
//       </footer>
//     </div>
//   );
// }
// export default Login;


// APPPOINTMENT BACKUP 


import React, { useState } from 'react';
import { TextField, Button, Select, MenuItem, FormControl, InputLabel, Container, Typography } from '@mui/material';
import { DatePicker } from '@mui/lab'; // Ensure MUI Lab is installed and imported for DatePicker
import ArrowBackIcon from '@mui/icons-material/ArrowBack';
import { useHistory  } from "react-router-dom";


function CreateAppointmentForm() {
  const [appointmentDetails, setAppointmentDetails] = useState({
    patientId: '',
    date: new Date(),
    timeSlot: '',
    department: '',
    doctorId: '',
  });

  const handleChange = (event) => {
    const name = event.target.name;
    const value = event.target.value;
    setAppointmentDetails({ ...appointmentDetails, [name]: value });
  };



  const handleSubmit = async (event) => {
    event.preventDefault();
    // Submit logic here
    console.log(appointmentDetails);
    // Assume an endpoint 'http://localhost:3001/appointments' exists to handle this POST request
    fetch('http://localhost:3001/appointments', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(appointmentDetails),
    })
      .then(response => response.json())
      .then(data => console.log(data))
      .catch(error => console.error('Error:', error));
  };

  const onNavigateBack = () => {
    history.goBack(); // Navigate back to the previous page
  };
  const history = useHistory();


  return (
    
    // <Container>
    //    <Button startIcon={<ArrowBackIcon />} onClick={onNavigateBack} sx={{ my: 2 }}>
    //         Back
    //       </Button>
    //   <form onSubmit={handleSubmit}>
    //     <FormControl fullWidth margin="normal">
    //       <InputLabel>Patient ID</InputLabel>
    //       <TextField
    //         name="patientId"
    //         value={appointmentDetails.patientId}
    //         onChange={handleChange}
    //         required
    //       />
    //     </FormControl>

    //     <FormControl fullWidth margin="normal">
    //       <DatePicker
    //         label="Date"
    //         value={appointmentDetails.date}
    //         onChange={(newValue) => {
    //           setAppointmentDetails({ ...appointmentDetails, date: newValue });
    //         }}
    //         renderInput={(params) => <TextField {...params} />}
    //       />
    //     </FormControl>

    //     <FormControl fullWidth margin="normal">
    //       <InputLabel>Time Slot</InputLabel>
    //       <Select
    //         name="timeSlot"
    //         value={appointmentDetails.timeSlot}
    //         onChange={handleChange}
    //         required
    //       >
    //         <MenuItem value="Morning">Morning</MenuItem>
    //         <MenuItem value="Evening">Evening</MenuItem>
    //       </Select>
    //     </FormControl>

    //     <FormControl fullWidth margin="normal">
    //       <InputLabel>Department</InputLabel>
    //       <Select
    //         name="department"
    //         value={appointmentDetails.department}
    //         onChange={handleChange}
    //         required
    //       >
    //         <MenuItem value="Orthopedic">Orthopedic</MenuItem>
    //         <MenuItem value="ENT">ENT</MenuItem>
    //         {/* Add more departments as necessary */}
    //       </Select>
    //     </FormControl>

    //     <FormControl fullWidth margin="normal">
    //       <InputLabel>Doctor ID</InputLabel>
    //       <TextField
    //         name="doctorId"
    //         value={appointmentDetails.doctorId}
    //         onChange={handleChange}
    //         required
    //       />
    //     </FormControl>

    //     <Button type="submit" variant="contained" color="primary">
    //       Create Appointment
    //     </Button>
    //   </form>
    // </Container>
    <Container maxWidth="sm" sx={{ mt: 4 }}>
      <Button startIcon={<ArrowBackIcon />} onClick={onNavigateBack} sx={{ mb: 2 }}>
        Back
      </Button>
      <Typography variant="h6" gutterBottom>
        Create New Appointment
      </Typography>
      <form onSubmit={handleSubmit}>
        <FormControl fullWidth margin="normal">
          <InputLabel htmlFor="patient-id">Patient ID</InputLabel>
          <TextField
            id="patient-id"
            name="patientId"
            value={appointmentDetails.patientId}
            onChange={handleChange}
            required
          />
        </FormControl>

        <FormControl fullWidth margin="normal">
          <DatePicker
            label="Date"
            value={appointmentDetails.date}
            onChange={(newValue) => {
              setAppointmentDetails({ ...appointmentDetails, date: newValue });
            }}
            renderInput={(params) => <TextField {...params} required />}
          />
        </FormControl>

        <FormControl fullWidth margin="normal">
          <InputLabel htmlFor="time-slot">Time Slot</InputLabel>
          <Select
            id="time-slot"
            name="timeSlot"
            value={appointmentDetails.timeSlot}
            onChange={handleChange}
            required
          >
            <MenuItem value="morning">Morning</MenuItem>
            <MenuItem value="evening">Evening</MenuItem>
          </Select>
        </FormControl>

        <FormControl fullWidth margin="normal">
          <InputLabel htmlFor="department">Department</InputLabel>
          <Select
            id="department"
            name="department"
            value={appointmentDetails.department}
            onChange={handleChange}
            required
          >
            <MenuItem value="Orthopedic">Orthopedic</MenuItem>
            <MenuItem value="ENT">ENT</MenuItem>
            </Select>
        </FormControl>

        <FormControl fullWidth margin="normal">
          <InputLabel htmlFor="doctor-id">Doctor ID</InputLabel>
          <TextField
            id="doctor-id"
            name="doctorId"
            value={appointmentDetails.doctorId}
            onChange={handleChange}
            required
          />
        </FormControl>

        <Button type="submit" variant="contained" color="primary" sx={{ mt: 3, mb: 2 }}>
          Create Appointment
        </Button>
      </form>
    </Container>
  );
}

// export default CreateAppointmentForm;
